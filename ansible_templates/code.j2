from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.connection import Connection
from ansible_collections.fortinet.fortios.plugins.module_utils.fortios.fortios import FortiOSHandler
from ansible_collections.fortinet.fortios.plugins.module_utils.fortios.fortios import check_legacy_fortiosapi
from ansible_collections.fortinet.fortios.plugins.module_utils.fortios.fortios import schema_to_module_spec
from ansible_collections.fortinet.fortios.plugins.module_utils.fortios.fortios import check_schema_versioning
from ansible_collections.fortinet.fortios.plugins.module_utils.fortimanager.common import FAIL_SOCKET_MSG
from ansible_collections.fortinet.fortios.plugins.module_utils.fortios.comparison import is_same_comparison
from ansible_collections.fortinet.fortios.plugins.module_utils.fortios.comparison import serialize


def filter_{{path}}_{{name}}_data(json):
    option_list = [ {%- for key, value in schema['schema']['children']|dictsort -%}
                    '{{value['name']}}'{%- if not loop.last%},{%endif -%}
                    {% if loop.index % 3 == 0 and not loop.last %}
                   {% else %} {% endif %}
                   {%- endfor -%}]
    dictionary = {}

    for attribute in option_list:
        if attribute in json and json[attribute] is not None:
            dictionary[attribute] = json[attribute]

    return dictionary

{% if special_attributes != [] -%}
def flatten_single_path(data, path, index):
    if not data or index == len(path) or not data[path[index]]:
        return

    if index == len(path) - 1:
        data[path[index]] = ' '.join(str(elem) for elem in data[path[index]])
    elif isinstance(data[path[index]], list):
        for value in data[path[index]]:
            flatten_single_path(value, path, index + 1)
    else:
        flatten_single_path(data[path[index]], path, index + 1)


def flatten_multilists_attributes(data):
    multilist_attrs = {{special_attributes}}

    for attr in multilist_attrs:
        flatten_single_path(data, attr, 0)

    return data
{% endif-%}

def underscore_to_hyphen(data):
    if isinstance(data, list):
        for i, elem in enumerate(data):
            data[i] = underscore_to_hyphen(elem)
    elif isinstance(data, dict):
        new_data = {}
        for k, v in data.items():
            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
        data = new_data

    return data

{% if vi|length > 0 -%}
def valid_attr_to_invalid_attr(data):
    specillist = { {%- for k,v in vi |dictsort -%}
            "{{k}}": "{{v}}"{%- if not loop.last %}, {%endif%}{% endfor -%}
    }

    for k,v in specillist.items():
        if v == data:
            return k

    return data

def valid_attr_to_invalid_attrs(data):
    if isinstance(data, list):
        for elem in data:
            elem = valid_attr_to_invalid_attrs(elem)
    elif isinstance(data, dict):
        new_data = {}
        for k, v in data.items():
            new_data[valid_attr_to_invalid_attr(k)] = valid_attr_to_invalid_attrs(v)
        data = new_data

    return data
{% endif -%}

{% if supports_check_mode -%}
def {{path}}_{{name}}(data, fos, check_mode=False):
{% else -%}
def {{path}}_{{name}}(data, fos):
{%- endif %}
    vdom = data['vdom']
    {%- if "mkey" in schema['schema'] %}
    {% if module_version_added == 2.8 %}
    if 'state' in data and data['state']:
        state = data['state']
    elif 'state' in data['{{path}}_{{name}}'] and data['{{path}}_{{name}}']['state']:
        state = data['{{path}}_{{name}}']['state']
    else:
        state = True
        fos._module.warn("state was not provided. Assuming 'present'.")
    {% else %}
    state = data['state']
    {% endif %}
    {%- endif %}
    {{path}}_{{name}}_data = data['{{path}}_{{name}}']
    {% if special_attributes != [] -%}{{path}}_{{name}}_data = flatten_multilists_attributes({{path}}_{{name}}_data)
    {% endif -%}
    filtered_data = underscore_to_hyphen(filter_{{path}}_{{name}}_data({{path}}_{{name}}_data))
    {%- if vi|length > 0 %}
    converted_data = valid_attr_to_invalid_attrs(filtered_data)
    {%- endif %}

    {% if supports_check_mode -%}
    # check_mode starts from here
    if check_mode:
        mkey = fos.get_mkey('system', 'interface', filtered_data, vdom=vdom)
        current_data = fos.get('system', 'interface', vdom=vdom, mkey=mkey)
        is_existed = current_data and current_data.get('http_status') == 200 \
            and type(current_data.get('results')) == list \
            and len(current_data['results']) > 0

        # 2. if it exists and the state is 'present' then compare current settings with desired
        if state == 'present' or state is True:
            if mkey is None:
                return False, True, filtered_data

            # if mkey exists then compare each other
            # record exits and they're matched or not
            if is_existed:
                is_same = is_same_comparison(
                    serialize(current_data['results'][0]), serialize(filtered_data))
                return False, not is_same, filtered_data

            # record does not exist
            return False, True, filtered_data

        if state == 'absent':
            if mkey is None:
                return False, False, filtered_data

            if is_existed:
                return False, True, filtered_data
            return False, False, filtered_data

        return True, False, {'reason: ': 'Must provide state parameter'}
    {% endif -%}
    {% if "mkey" in schema['schema'] %}
    if state == "present" or state is True:
        return fos.set('{{original_path}}',
                       '{{original_name}}',
                       {% if vi|length > 0 -%}
                       data=converted_data,
                       {% else -%}
                       data=filtered_data,
                       {% endif -%}
                       vdom=vdom)

    elif state == "absent":
        return fos.delete('{{original_path}}',
                          '{{original_name}}',
                          mkey=filtered_data['{{schema['schema']['mkey']|replace('_', '-')}}'],
                          vdom=vdom)
    else:
        fos._module.fail_json(msg='state must be present or absent!')
    {%else%}
    return fos.set('{{original_path}}',
                    '{{original_name}}',
                    {% if vi|length > 0 -%}
                    data=converted_data,
                    {% else -%}
                    data=filtered_data,
                    {% endif -%}
                    vdom=vdom)
    {%endif%}

def is_successful_status(status):
    return status['status'] == "success" or \
        status['http_method'] == "DELETE" and status['http_status'] == 404

{% if movable %}
def move_fortios_{{path}}(data, fos):
    if not data['self'] or (not data['after'] and not data['before']):
        fos._module.fail_json(msg='self, after(or before) must not be empty')
    vdom = data['vdom']
    params_set = dict()
    params_set['action'] = 'move'
    if data['after']:
        params_set['after'] = data['after']
    if data['before']:
        params_set['before'] = data['before']
    return fos.set('{{original_path}}',
                   '{{original_name}}',
                   data=None,
                   mkey=data['self'],
                   vdom=vdom,
                   parameters=params_set)

{%- endif %}

{% if supports_check_mode -%}
def fortios_{{path}}(data, fos, check_mode):
{% else %}
def fortios_{{path}}(data, fos):
{% endif %}
    {% if movable -%}
    if data['action'] == 'move':
        resp = move_fortios_{{path}}(data, fos)
    elif data['{{path}}_{{name}}']:
    {%- else -%}
    if data['{{path}}_{{name}}']:
    {%- endif -%}
    {%- if supports_check_mode %}
        resp = {{path}}_{{name}}(data, fos, check_mode)
    else:
        fos._module.fail_json(msg='missing task body: %s' % ('{{path}}_{{name}}'))
    if check_mode:
        return resp
{%- else %}
        resp = {{path}}_{{name}}(data, fos)
    else:
        fos._module.fail_json(msg='missing task body: %s' % ('{{path}}_{{name}}'))
{% endif %}
    return not is_successful_status(resp), \
        resp['status'] == "success" and \
        (resp['revision_changed'] if 'revision_changed' in resp else True), \
        resp
{% macro getAnsibleType(parent_attrs, attribute) -%}
{%- if calculateFullPath(parent_attrs, attribute["name"]) in special_attributes_flattened -%}
list
{%- elif attribute["type"] == "string" or attribute["type"] == "option" or  attribute["type"] == "var_string" -%}
str
{%- elif not attribute["type"] and attribute["category"]=="table"-%}
list
{%- elif not attribute["type"] and attribute["category"]=="complex"-%}
dict
{%- elif attribute["type"] == "integer"-%}
int
{%- elif attribute["type"] == "user"-%}
str
{%- elif attribute["type"] == "ipv4_address"-%}
str
{%- elif attribute["type"] == "ipv6_address"-%}
str
{%- elif attribute["type"] == "password"-%}
str
{%- elif attribute["type"] == "password_2"-%}
str
{%- elif attribute["type"] == "password_3"-%}
str
{%- elif attribute["type"] == "ipv4_classnet_any"-%}
str
{%- elif attribute["type"] == "ipv4_address_any"-%}
str
{%- elif attribute["type"] == "ipv4_address_multicast"-%}
str
{%- elif attribute["type"] == "ipv4_classnet"-%}
str
{%- elif attribute["type"] == "ipv4_classnet_host"-%}
str
{%- elif attribute["type"] == "ipv4_netmask"-%}
str
{%- elif attribute["type"] == "ipv4_netmask_any"-%}
str
{%- elif attribute["type"] == "ipv6_network"-%}
str
{%- elif attribute["type"] == "ipv6_prefix"-%}
str
{%- elif attribute["type"] == "mac_address"-%}
str
{%- elif attribute["type"] == "uuid"-%}
str
{%- elif attribute["type"] == "time"-%}
str
{%- elif attribute["type"] == "datetime"-%}
str
{%- else -%}
{{attribute["type"]}}
{%- endif -%}
{%- endmacro %}
{% macro code_fields(dict, mkey, parent_attrs) -%}
                {%- for key,value in dict |dictsort -%}
                "{{value['name']}}": {"required": {% if key == mkey -%}
                        True
                    {%- else -%}
                        False
                    {%- endif -%}
                    , "type": "{{getAnsibleType(parent_attrs, value)}}"
                    {%- if "options" in value and value['options']%},
                    "choices": [
                        {%- for v in value["options"] -%}
                        "{{ v["name"] }}"{% if not loop.last %}, {%endif-%}
                        {%- if loop.index % 1 == 0 and not loop.last %}
                        {% endif -%}
                        {%- endfor -%} ]
                    {%- endif -%}
                    {%- if value["category"] == "table" or value["category"] == "complex" %},
                    "options": {
                        {{code_fields(value["children"], value["mkey"], key if parent_attrs == '' else parent_attrs + ',' + key) |indent |indent }} }
                    {%- endif -%}}{%- if not loop.last %}, {%endif%}
                {% endfor -%}
{%- endmacro %}

versioned_schema = {{ versioned_schema }}

def main():
    module_spec = schema_to_module_spec(versioned_schema)
    mkeyname = {% if mkeyname -%} '{{mkeyname|replace("_", "-")}}' {%- else -%} None {%- endif %}
    fields = {
        "access_token": {"required": False, "type": "str", "no_log": True},
        "enable_log": {"required": False, "type": bool},
        "vdom": {"required": False, "type": "str", "default": "root"},
        {%if movable -%}
        "action": {"type": "str", "required": False, "choices": ["move"]},
        "self": {"type": "str", "required": False},
        "before": {"type": "str", "required": False},
        "after": {"type": "str", "required": False},
        {%endif-%}
        {%if "mkey" in schema['schema'] %}"state": {"required": {% if module_version_added == 2.8 or movable %}False{% else %}True{% endif %}, "type": "str",
                        "choices": ["present", "absent"]},
        {%endif-%}
        "{{path}}_{{name}}": {
            "required": False, "type": "dict", "default": None,
            "options": { {% if module_version_added == 2.8 and "mkey" in schema['schema'] %}
                "state": {"required": False, "type": "str",
                          "choices": ["present", "absent"]}{% endif %}
            }
        }
    }
    for attribute_name in module_spec['options']:
        fields["{{path}}_{{name}}"]['options'][attribute_name] = module_spec['options'][attribute_name]
        if mkeyname and mkeyname == attribute_name:
            fields["{{path}}_{{name}}"]['options'][attribute_name]['required'] = True

    check_legacy_fortiosapi()
    module = AnsibleModule(argument_spec=fields,
                           supports_check_mode={% if supports_check_mode %}True{% else %}False{% endif %})

    versions_check_result = None
    if module._socket_path:
        connection = Connection(module._socket_path)
        if 'access_token' in module.params:
            connection.set_option('access_token', module.params['access_token'])

        if 'enable_log' in module.params:
            connection.set_option('enable_log', module.params['enable_log'])
        else:
            connection.set_option('enable_log', False)
        fos = FortiOSHandler(connection, module, mkeyname)
        versions_check_result = check_schema_versioning(fos, versioned_schema, "{{path}}_{{name}}")
        {% if supports_check_mode %}
        is_error, has_changed, result = fortios_{{path}}(module.params, fos, module.check_mode)
        {% else %}
        is_error, has_changed, result = fortios_{{path}}(module.params, fos)
        {% endif %}
    else:
        module.fail_json(**FAIL_SOCKET_MSG)

    if versions_check_result and versions_check_result['matched'] is False:
        module.warn("Ansible has detected version mismatch between FortOS system and your playbook, see more details by specifying option -vvv")

    if not is_error:
        if versions_check_result and versions_check_result['matched'] is False:
            module.exit_json(changed=has_changed, version_check_warning=versions_check_result, meta=result)
        else:
            module.exit_json(changed=has_changed, meta=result)
    else:
        if versions_check_result and versions_check_result['matched'] is False:
            module.fail_json(msg="Error in repo", version_check_warning=versions_check_result, meta=result)
        else:
            module.fail_json(msg="Error in repo", meta=result)

if __name__ == '__main__':
    main()
